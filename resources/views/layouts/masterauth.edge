<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{{ title ?? '' }}</title>
    <link rel="shortcut icon" href="/favicon.ico">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/app.css') }}">
    <!-- Alpine Plugins -->
    <script defer src="https://unpkg.com/@alpinejs/persist@3.x.x/dist/cdn.min.js"></script>
    <!-- AlpineJS -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <!-- Font Awesome -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js" integrity="sha256-KzZiKy0DWYsnwMF+X1DvQngQ2/FxF7MF3Ff72XcpuPs=" crossorigin="anonymous"></script>
    <!-- ChartJS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" integrity="sha256-R4pqcOYV8lt7snxMQO/HSbVCFRPMdrhAFMH+vr9giYI=" crossorigin="anonymous"></script>
    <!-- Vanilla Masker -->
    <script src="https://unpkg.com/vanilla-masker@1.1.1/build/vanilla-masker.min.js"></script>
    <!-- Poppings Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
      />
    <!-- Unfortunately Toastr uses JQuery onder the hood -->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <!-- Toastr -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" integrity="sha512-6S2HWzVFxruDlZxI3sXOZZ4/eJ8AcxkQH1+JjSe/ONCEqR9L4Ysq5JdT5ipqtzU7WHalNwzwBv+iE51gNHJNqQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js" integrity="sha512-lbwH47l/tPXJYG9AcFNoJaTMhGvYWhVM9YI43CT+uteTRRaiLCui8snIgyAN8XWgNjNhCqlAUdzZptso6OCoFQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- AlpineJS x-cloak trick to prevent elements with x-show property to flash on screen on refresh/load -->
    <!-- Socket.IO -->
    <script src="https://cdn.socket.io/4.4.0/socket.io.min.js" integrity="sha384-1fOn6VtTq3PWwfsOrk45LnYcGosJwzMHv+Xh/Jx5303FVOXzEnw0EpLv30mtjmlj" crossorigin="anonymous"></script>
    <!-- Vanilla CaretJS -->
    <script src="https://cdn.jsdelivr.net/npm/vanilla-caret-js@1.0.1/dist/VanillaCaret.min.js"></script>
    <style>
        [x-cloak] { display: none }
    </style>
    @!section('head')
</head>

<body x-cloak x-data='{drawer: $persist(true), dark: $persist(false), chat: {{{ JSON.stringify(chat) }}}, notifications: {{{ JSON.stringify(notifications) }}}}' x-bind:class="dark ? 'dark' : ''" x-on:chat.window="chat.push($event.detail.message)" x-on:notification.window="notifications.push($event.detail.notification)">
    <div class="container-fluid bg-gray-100 dark:bg-dark-dark">
        <div class="font-family-karla flex">
            @include('partials/aside')
            
            <div class="w-full flex flex-col h-screen overflow-y-hidden">
                @include('partials/header')
            
                <div class="w-full h-full overflow-x-hidden flex flex-col">
                    
                    @!section('content')

                    @include('partials/chat')
            
                    @include('partials/footer')
                </div>
                
            </div>
        </div>
    </div>
</body>
<script>
var connected = false;
const RETRY_INTERVAL = 10000;
var timeout;

let socket = io();

let messageInput = document.getElementById('messageinput');
let messageButton = document.getElementById('messagebutton');

let mentions = [];

messageInput.addEventListener('keydown', function (event) {
    if(event.keyCode==13) {
        if (messageInput.innerHTML !== '') {
            socket.emit('message', { room: {{{ JSON.stringify(user) }}}.account_id, message: {from: {{ user.id }}, message: messageInput.innerHTML, mentions: mentions}});

            messageInput.innerHTML = '';
        }
    } else if (event.keyCode === 188 || event.keyCode === 190) {
        event.preventDefault();
    }
});

messageButton?.addEventListener('click', function(event) {
    if (messageInput.innerHTML !== '') {
        socket.emit('message', { room: {{{ JSON.stringify(user) }}}.account_id, message: {from: {{ user.id }}, message: messageInput.innerHTML, mentions: mentions}});

        messageInput.innerHTML = '';
    }
})

socket.on('connect',function(){
    clearTimeout(timeout);

    socket.emit('setup', {room: {{{ JSON.stringify(user) }}}.account_id, id: {{{ JSON.stringify(user) }}}.id});
})

socket.on('message', function(data) {
    let event = new CustomEvent('chat', {
        bubbles: true,
        detail: { message: data },
    });
    
    window.dispatchEvent(event);
})

socket.on('notification', function(data) {
    let event = new CustomEvent('notification', {
        bubbles: true,
        detail: { notification: data },
    });
    
    window.dispatchEvent(event);
})

socket.on('disconnect', function() {
    connected = false;
    
    reconnect(RETRY_INTERVAL);
});

socket.on('error', function(error) {
    connected = false;

    reconnect(RETRY_INTERVAL);
})

function reconnect(time) {
    timeout = setTimeout(function() {
        if (!connected) {
            reconnect(time);
        }
    }, time);
}
</script>
<script>
let caret = new VanillaCaret(messageInput);

function markMentions(element, rawText = null) {
    mentions = [];
    
    const text = rawText ?? element.innerText;
    
    const words = text.split(' ');
    
    const htmlWords = words.map(function(word, index) {
    	const wordHandler = word.replace(/\s/g, '');
    
    	const match = /^\@[a-z]+/gi.exec(wordHandler);

        if (match) {             
            const user = {{{ JSON.stringify(usersMention) }}}.find(function(user) {
                return '@' + user.slug === wordHandler;
            });
            
            if (user) {
                mentions.push(user.id);
            
                return `<span class="text-blue-500">${word}</span>`;
            } else {
                return word;
            }
        } else {
            return word;
        }
    });
               
    
    return htmlWords.join(' ');
}

function insertMention(slug, mentionId) {
    const caretIndex = caret.getPos();

    const text = messageInput.innerText;

    const words = text.split(' ');
    
    const lengths = words.map(function(word) {
        return word.length;
    });

    let length = 0;
    let indexWords = 0;
    
    const htmlWords = words.map(function(word, index) {
        const whiteSpaces = index;

        const stringLengthUntil = lengths.slice(0, index).reduce(function(previousValue, currentValue) {
            return previousValue + currentValue
        }, 0);
      
        if (stringLengthUntil < caretIndex - 1 && caretIndex === stringLengthUntil + lengths[index] + whiteSpaces) {
            length = stringLengthUntil;
            indexWords = index;

            return `@${slug}`;
        } else {
            return word;
        }
    })
    
    messageInput.innerHTML = markMentions(messageInput, htmlWords.join(' '));
    
    caret.setPos(length + `@${slug}`.length + indexWords);

    openMentions(messageInput);

    messageInput.focus();
}

function openMentions(element, rawText = null) {
    const text = rawText ?? element.innerText;
    
    const words = text.split(/\s/g);
    
    let openMentions = false;
    let mentionSearch = '';
    
    const htmlWords = words.map(function(word, index) {
    	const match = /^\@[a-z]+/gi.exec(word);

        if (match) {
            const caretIndex = caret.getPos();
            
            const whiteSpaces = index;

            const lengths = words.map(function(word) {
                return word.length;
            });
          
            const stringLengthUntil = lengths.slice(0, index).reduce(function(previousValue, currentValue) {
                return previousValue + currentValue
            }, 0);

            if (stringLengthUntil < caretIndex - 1 && caretIndex <= stringLengthUntil + lengths[index] + whiteSpaces) {
                const user = {{{ JSON.stringify(usersMention) }}}.find(function(user) {
                    return '@' + user.slug === word;
                });
                
                if (!user) {
                    openMentions = true;
                    mentionSearch = word;
                }
            }
        }
    });

    if (openMentions) {
        const event = new CustomEvent('open-mention', {
            bubbles: true,
            detail: { 
                search: mentionSearch.substring(1)
            },
        });
        
        window.dispatchEvent(event);
    } else {
        const event = new CustomEvent('close-mention');
        
        window.dispatchEvent(event);
    }
}

messageInput.addEventListener('input', function(event) {
    const caretIndex = caret.getPos();
    
    const html = markMentions(event.target);

    messageInput.innerHTML = html;
    
    caret.setPos(caretIndex);
});

['mouseup', 'keyup'].forEach(function (eventName) {
    messageInput.addEventListener(eventName, function (event) {
        openMentions(event.target);
    })
})
</script>
<script>
const flashSuccessMessage = ({{{ flashMessages.has('success') }}});
const flashErrorMessage = ({{{ flashMessages.has('error') }}});

if (flashSuccessMessage) {
    toastr.success("{{ flashMessages.get('success') ?? '' }}", 'Sucesso')
}

if (flashErrorMessage) {
    toastr.error("{{ flashMessages.get('error') ?? '' }}", 'Erro')
}
</script>
</html>