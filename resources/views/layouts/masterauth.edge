<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{{ title ?? '' }}</title>
    <link rel="shortcut icon" href="/favicon.ico">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/app.css') }}">
    <!-- Alpine Plugins -->
    <script defer src="https://unpkg.com/@alpinejs/persist@3.x.x/dist/cdn.min.js"></script>
    <!-- AlpineJS -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <!-- Font Awesome -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js" integrity="sha256-KzZiKy0DWYsnwMF+X1DvQngQ2/FxF7MF3Ff72XcpuPs=" crossorigin="anonymous"></script>
    <!-- ChartJS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" integrity="sha256-R4pqcOYV8lt7snxMQO/HSbVCFRPMdrhAFMH+vr9giYI=" crossorigin="anonymous"></script>
    <!-- Vanilla Masker -->
    <script src="https://unpkg.com/vanilla-masker@1.1.1/build/vanilla-masker.min.js"></script>
    <!-- Poppings Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
      />
    <!-- Unfortunately Toastr uses JQuery onder the hood -->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <!-- Toastr -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" integrity="sha512-6S2HWzVFxruDlZxI3sXOZZ4/eJ8AcxkQH1+JjSe/ONCEqR9L4Ysq5JdT5ipqtzU7WHalNwzwBv+iE51gNHJNqQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js" integrity="sha512-lbwH47l/tPXJYG9AcFNoJaTMhGvYWhVM9YI43CT+uteTRRaiLCui8snIgyAN8XWgNjNhCqlAUdzZptso6OCoFQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- AlpineJS x-cloak trick to prevent elements with x-show property to flash on screen on refresh/load -->
    <!-- Socket.IO -->
    <script src="https://cdn.socket.io/4.4.0/socket.io.min.js" integrity="sha384-1fOn6VtTq3PWwfsOrk45LnYcGosJwzMHv+Xh/Jx5303FVOXzEnw0EpLv30mtjmlj" crossorigin="anonymous"></script>
    <style>
        [x-cloak] { display: none }
    </style>
    @!section('head')
</head>

<body x-cloak x-data='{drawer: $persist(true), dark: $persist(false), chat: {{{ JSON.stringify(chat) }}}, notifications: {{{ JSON.stringify(notifications) }}}}' x-bind:class="dark ? 'dark' : ''" x-on:chat.window="chat.push($event.detail.message)" x-on:notification.window="notifications.push($event.detail.notification)">
    <div class="container-fluid bg-gray-100 dark:bg-dark-dark">
        <div class="font-family-karla flex">
            @include('partials/aside')
            
            <div class="w-full flex flex-col h-screen overflow-y-hidden">
                @include('partials/header')
            
                <div class="w-full h-full overflow-x-hidden flex flex-col">
                    
                    @!section('content')

                    @include('partials/chat')
            
                    @include('partials/footer')
                </div>
                
            </div>
        </div>
    </div>
</body>
<script>
let socket = io();

let messageInput = document.getElementById('messageinput');
let messageButton = document.getElementById('messagebutton');

messageInput.addEventListener('input', updateEditor);

let mentions = [];

function getTextSegments(element) {
    const textSegments = [];
    
    Array.from(element.childNodes).forEach((node) => {
        switch(node.nodeType) {
            case Node.TEXT_NODE:
                textSegments.push({text: node.nodeValue, node});
                break;
                
            case Node.ELEMENT_NODE:
                textSegments.splice(textSegments.length, 0, ...(getTextSegments(node)));
                break;
                
            default:
                throw new Error(`Unexpected node type: ${node.nodeType}`);
        }
    });
    
    return textSegments;
}


function updateEditor() {
    const sel = window.getSelection();

    const textSegments = getTextSegments(messageInput);

    const textContent = textSegments.map(({text}) => text).join('');

    let anchorIndex = null;
    let focusIndex = null;
    let currentIndex = 0;

    textSegments.forEach(({text, node}) => {
        if (node === sel.anchorNode) {
            anchorIndex = currentIndex + sel.anchorOffset;
        }

        if (node === sel.focusNode) {
            focusIndex = currentIndex + sel.focusOffset;
        }

        currentIndex += text.length;
    });
    
    messageInput.innerHTML = renderText(textContent);
    
    restoreSelection(anchorIndex, focusIndex);
}

function insertMention(slug, id) {
    const sel = window.getSelection();

    const textSegments = getTextSegments(messageInput);

    const textContent = textSegments.map(({text}) => text).join('');

    let anchorIndex = null;
    let focusIndex = null;
    let currentIndex = 0;

    textSegments.forEach(({text, node}) => {
        if (node === sel.anchorNode) {
            anchorIndex = currentIndex + sel.anchorOffset;
        }

        if (node === sel.focusNode) {
            focusIndex = currentIndex + sel.focusOffset;
        }

        currentIndex += text.length;
    });

    const result = insertText(currentIndex, slug, textContent, id);
    
    messageInput.innerHTML = result.text;

    restoreSelection(result.finalIndex, result.finalIndex);
}

function restoreSelection(absoluteAnchorIndex, absoluteFocusIndex) {
    const sel = window.getSelection();

    const textSegments = getTextSegments(messageInput);

    let anchorNode = messageInput;
    let anchorIndex = 0;
    let focusNode = messageInput;
    let focusIndex = 0;
    let currentIndex = 0;

    textSegments.forEach(({text, node}) => {
        const startIndexOfNode = currentIndex;

        const endIndexOfNode = startIndexOfNode + text.length;

        if (startIndexOfNode <= absoluteAnchorIndex && absoluteAnchorIndex <= endIndexOfNode) {
            anchorNode = node;
            anchorIndex = absoluteAnchorIndex - startIndexOfNode;
        }

        if (startIndexOfNode <= absoluteFocusIndex && absoluteFocusIndex <= endIndexOfNode) {
            focusNode = node;
            focusIndex = absoluteFocusIndex - startIndexOfNode;
        }

        currentIndex += text.length;
    });
    
    sel.setBaseAndExtent(anchorNode,anchorIndex,focusNode,focusIndex);
}

function renderText(text) {
    mentions = [];

    const words = text.split(/(\s+)/);

    const output = words.map((word) => {
        if (word.match(/^\@[a-zA-Z]+$/g)) {
            var event = new CustomEvent('open-mention', {
                bubbles: true,
                detail: { 
                    position: getCaretPosition(),
                    search: word.substring(1)
                },
            });

            window.dispatchEvent(event);
            
            const user = {{{ JSON.stringify(usersMention) }}}.find(function(user) {return "@" + user.slug === word});

            if (user) {
                mentions.push(user.id);

                return `<span class='text-blue-500'>${word}</span>`;
            } else {
                return word
            }
        }
        else {
            var event = new CustomEvent('close-mention', {
                bubbles: true,
            });

            window.dispatchEvent(event);

            return word;
        }
    })
    
    return output.join('');
}

function insertText(index, insertText, text, id) {
    mentions = [];

    const words = text.split(/(\s+)/);

    const lengths = words.map(function(word) {return word.length});

    let finalIndex = 0;

    const output = words.map(function(word, position) {
        if (word.match(/^\@[a-zA-Z]+$/g)) {
            if (lengths.slice(0, position).reduce(function(previousValue, currentValue) {return previousValue + currentValue},0) < index && index <= lengths.slice(0, position + 1).reduce(function(previousValue, currentValue) {return previousValue + currentValue},0)) {
                mentions.push(id);
                
                lengths[position] = insertText.length;

                finalIndex = lengths.slice(0, position + 1).reduce(function(previousValue, currentValue) {return previousValue + currentValue}, 0) + 1;

                return `<span class='text-blue-500'>@${insertText}</span>`;
            }
            
            var event = new CustomEvent('open-mention', {
                bubbles: true,
                detail: { 
                    position: getCaretPosition(),
                    search: word.substring(1)
                },
            });

            window.dispatchEvent(event);

            const user = {{{ JSON.stringify(usersMention) }}}.find(function(user) {return "@" + user.slug === word});

            if (user) {
                mentions.push(user.id);

                return `<span class='text-blue-500'>${word}</span>`;
            } else {
                return word;
            }
        } else {
            var event = new CustomEvent('close-mention', {
                bubbles: true,
            });

            window.dispatchEvent(event);

            return word;
        }
    })
    
    return { text: output.join(''), finalIndex: finalIndex};
}

function getCaretPosition() {
    let x = 0;
    let y = 0;

    const isSupported = typeof window.getSelection !== "undefined";

    if (isSupported) {
        const selection = window.getSelection();

        if (selection.rangeCount !== 0) {
            const range = selection.getRangeAt(0).cloneRange();

            range.collapse(true);

            const rect = range.getClientRects()[0];

            if (rect) {
                x = rect.left;
                y = rect.top;
            }
        }
    }

    return { x, y };
}

function getCaretIndex() {
  let position = 0;

  const isSupported = typeof window.getSelection !== "undefined";

  if (isSupported) {
    const selection = window.getSelection();

    if (selection.rangeCount !== 0) {
      const range = window.getSelection().getRangeAt(0);

      const preCaretRange = range.cloneRange();

      preCaretRange.selectNodeContents(messageInput);

      preCaretRange.setEnd(range.endContainer, range.endOffset);

      position = preCaretRange.toString().length;
    }
  }
  return position;
}

messageInput.addEventListener('keydown', function (e) {
    if(e.keyCode==13) {
        if (messageInput.innerHTML !== '') {
            socket.emit('message', { room: {{{ JSON.stringify(user) }}}.account_id, message: {from: {{ user.id }}, message: messageInput.innerHTML, mentions: mentions}});

            messageInput.innerHTML = '';
        }
    } else if (e.keyCode === 188 || e.keyCode === 190) {
        e.preventDefault();
    }
});

messageButton?.addEventListener('click', function(event) {
    if (messageInput.innerHTML !== '') {
        socket.emit('message', { room: {{{ JSON.stringify(user) }}}.account_id, message: {from: {{ user.id }}, message: messageInput.innerHTML, mentions: mentions}});

        messageInput.innerHTML = '';
    }
})

socket.on('connect',function(){
    socket.emit('setup', {room: {{{ JSON.stringify(user) }}}.account_id, id: {{{ JSON.stringify(user) }}}.id});
})

socket.on('message', function(data) {
    let event = new CustomEvent('chat', {
        bubbles: true,
        detail: { message: data },
    });
    
    window.dispatchEvent(event);
})

socket.on('notification', function(data) {
    let event = new CustomEvent('notification', {
        bubbles: true,
        detail: { notification: data },
    });
    
    window.dispatchEvent(event);
})

socket.on('error', function(error) {
    toastr.error(error, 'Erro')
})
</script>
<script>
const flashSuccessMessage = ({{{ flashMessages.has('success') }}});
const flashErrorMessage = ({{{ flashMessages.has('error') }}});

if (flashSuccessMessage) {
    toastr.success("{{ flashMessages.get('success') ?? '' }}", 'Sucesso')
}

if (flashErrorMessage) {
    toastr.error("{{ flashMessages.get('error') ?? '' }}", 'Erro')
}
</script>
</html>