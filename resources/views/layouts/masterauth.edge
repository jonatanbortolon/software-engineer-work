<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>{{ title ?? '' }}</title>
    <link rel="shortcut icon" href="/favicon.ico">
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/app.css') }}">
    <!-- Alpine Plugins -->
    <script defer src="https://unpkg.com/@alpinejs/persist@3.x.x/dist/cdn.min.js"></script>
    <!-- AlpineJS -->
    <script defer src="https://unpkg.com/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <!-- Font Awesome -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.0/js/all.min.js" integrity="sha256-KzZiKy0DWYsnwMF+X1DvQngQ2/FxF7MF3Ff72XcpuPs=" crossorigin="anonymous"></script>
    <!-- ChartJS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js" integrity="sha256-R4pqcOYV8lt7snxMQO/HSbVCFRPMdrhAFMH+vr9giYI=" crossorigin="anonymous"></script>
    <!-- Vanilla Masker -->
    <script src="https://unpkg.com/vanilla-masker@1.1.1/build/vanilla-masker.min.js"></script>
    <!-- Poppings Font -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
      />
    <!-- Unfortunately Toastr uses JQuery onder the hood -->
    <script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
    <!-- Toastr -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.css" integrity="sha512-6S2HWzVFxruDlZxI3sXOZZ4/eJ8AcxkQH1+JjSe/ONCEqR9L4Ysq5JdT5ipqtzU7WHalNwzwBv+iE51gNHJNqQ==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.4/toastr.min.js" integrity="sha512-lbwH47l/tPXJYG9AcFNoJaTMhGvYWhVM9YI43CT+uteTRRaiLCui8snIgyAN8XWgNjNhCqlAUdzZptso6OCoFQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <!-- AlpineJS x-cloak trick to prevent elements with x-show property to flash on screen on refresh/load -->
    <!-- Socket.IO -->
    <script src="https://cdn.socket.io/4.4.0/socket.io.min.js" integrity="sha384-1fOn6VtTq3PWwfsOrk45LnYcGosJwzMHv+Xh/Jx5303FVOXzEnw0EpLv30mtjmlj" crossorigin="anonymous"></script>
    <style>
        [x-cloak] { display: none }
    </style>
    @!section('head')
</head>

<body x-cloak x-data='{drawer: $persist(true), dark: $persist(false), chat: {{{ JSON.stringify(chat) }}}, notifications: {{{ JSON.stringify(notifications) }}}}' x-bind:class="dark ? 'dark' : ''" x-on:chat.window="chat.push($event.detail.message)" x-on:notification.window="notifications.push($event.detail.notification)">
    <div class="container-fluid bg-gray-100 dark:bg-dark-dark">
        <div class="font-family-karla flex">
            @include('partials/aside')
            
            <div class="w-full flex flex-col h-screen overflow-y-hidden">
                @include('partials/header')
            
                <div class="w-full h-full overflow-x-hidden flex flex-col">
                    
                    @!section('content')

                    @include('partials/chat')
            
                    @include('partials/footer')
                </div>
                
            </div>
        </div>
    </div>
</body>
<script>
let socket = io();

let messageInput = document.getElementById('messageinput');
let messageButton = document.getElementById('messagebutton');

let mentions = [];

messageInput.addEventListener('keydown', function (event) {
    if(event.keyCode==13) {
        if (messageInput.innerHTML !== '') {
            socket.emit('message', { room: {{{ JSON.stringify(user) }}}.account_id, message: {from: {{ user.id }}, message: messageInput.innerHTML, mentions: mentions}});

            messageInput.innerHTML = '';
        }
    } else if (event.keyCode === 188 || event.keyCode === 190) {
        event.preventDefault();
    }
});

messageButton?.addEventListener('click', function(event) {
    if (messageInput.innerHTML !== '') {
        socket.emit('message', { room: {{{ JSON.stringify(user) }}}.account_id, message: {from: {{ user.id }}, message: messageInput.innerHTML, mentions: mentions}});

        messageInput.innerHTML = '';
    }
})

socket.on('connect',function(){
    socket.emit('setup', {room: {{{ JSON.stringify(user) }}}.account_id, id: {{{ JSON.stringify(user) }}}.id});
})

socket.on('message', function(data) {
    let event = new CustomEvent('chat', {
        bubbles: true,
        detail: { message: data },
    });
    
    window.dispatchEvent(event);
})

socket.on('notification', function(data) {
    let event = new CustomEvent('notification', {
        bubbles: true,
        detail: { notification: data },
    });
    
    window.dispatchEvent(event);
})

socket.on('error', function(error) {
    toastr.error(error, 'Erro')
})
</script>
<script>
let caretIndex = 0;

function markMentions() {
    mentions = [];

    const text = messageInput.innerHTML.replace(/<\/?span>/gi, '').replace(/<[^>]+>/g, ' ').replace(/\s+/g, ' ');

    let textArr = text.split(' ');
    
    textArr = textArr.map(function(word) {
        if (/^\@[a-z]+/gi.exec(word)) {
            let event = new CustomEvent('open-mention', {
                bubbles: true,
                detail: { 
                    search: word.substring(1)
                },
            });

            window.dispatchEvent(event);

            const user = {{{ JSON.stringify(usersMention) }}}.find(function(user) {return '@' + user.slug === word || '&nbsp;@' + user.slug === word || '@' + user.slug + '&nbsp;' === word || '&nbsp;@' + user.slug + '&nbsp;' === word});

            if (user) {
                mentions.push(user.id);

                return `<span class='text-blue-500'>${word}</span>`;
            } else {
                return word;
            }
        } else {
            let event = new CustomEvent('close-mention', {
                bubbles: true,
            });

            window.dispatchEvent(event);

            return word;
        }
    })
    
    messageInput.innerHTML = textArr.join(' ');

    setEndOfContenteditable(messageInput);
}

function insertMention(slug, mentionId) {
    mentions = [];

    const text = messageInput.innerHTML.replace(/<\/?span>/gi, '').replace(/<[^>]+>/g, ' ').replace(/\s+/g, ' ');

    let textArr = text.split(' ');

    const lengths = textArr.map(function(word) {return word.length});

    textArr = textArr.map(function(word, index) {
        if (lengths.slice(0, index).reduce(function(previousValue, currentValue) {return previousValue + currentValue}, 0) < caretIndex && caretIndex <= lengths.slice(0, index + 1).reduce(function(previousValue, currentValue) {return previousValue + currentValue}, 0) + lengths.length) {
            mentions.push(mentionId);
            
            return `@${slug}`;
        } else {
            return word;
        }
    })
    
    messageInput.innerHTML = textArr.join(' ');

    markMentions();
}

["mouseup", "keyup"].forEach(function(eventName){
    messageInput.addEventListener(eventName, function(event) {
        caretIndex = getCaretIndex(event.target);
    });
});

messageInput.addEventListener('input', markMentions);

function setEndOfContenteditable(element) {
    let range;

    let selection;

    if(document.createRange) {
        range = document.createRange();

        range.selectNodeContents(element);

        range.collapse(false);

        selection = window.getSelection();

        selection.removeAllRanges();

        selection.addRange(range);
    } else if(document.selection) { 
        range = document.body.createTextRange();

        range.moveToElementText(element);

        range.collapse(false);

        range.select();
    }
}

function getCaretIndex(element) {
    let caretOffset = 0;

    let doc = element.ownerDocument || element.document;

    let win = doc.defaultView || doc.parentWindow;

    let sel;

    if (typeof win.getSelection != "undefined") {
        sel = win.getSelection();

        if (sel.rangeCount > 0) {
            let range = win.getSelection().getRangeAt(0);

            let preCaretRange = range.cloneRange();

            preCaretRange.selectNodeContents(element);

            preCaretRange.setEnd(range.endContainer, range.endOffset);

            caretOffset = preCaretRange.toString().length;
        }
    } else if ( (sel = doc.selection) && sel.type != "Control") {
        let textRange = sel.createRange();

        let preCaretTextRange = doc.body.createTextRange();

        preCaretTextRange.moveToElementText(element);

        preCaretTextRange.setEndPoint("EndToEnd", textRange);

        caretOffset = preCaretTextRange.text.length;
    }

    return caretOffset;
}
</script>
<script>
const flashSuccessMessage = ({{{ flashMessages.has('success') }}});
const flashErrorMessage = ({{{ flashMessages.has('error') }}});

if (flashSuccessMessage) {
    toastr.success("{{ flashMessages.get('success') ?? '' }}", 'Sucesso')
}

if (flashErrorMessage) {
    toastr.error("{{ flashMessages.get('error') ?? '' }}", 'Erro')
}
</script>
</html>